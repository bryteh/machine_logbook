# Generated by Django 5.2.1 on 2025-07-01 18:17

from django.db import migrations, connection

def fix_foreign_key_constraint(apps, schema_editor):
    """Fix the foreign key constraint to enable CASCADE deletion"""
    
    if schema_editor.connection.vendor == 'postgresql':
        with connection.cursor() as cursor:
            # Check if the constraint exists and update it if needed
            cursor.execute("""
                SELECT constraint_name 
                FROM information_schema.table_constraints 
                WHERE table_name = 'user_roles' 
                AND constraint_type = 'FOREIGN KEY'
                AND constraint_name LIKE '%user_id%'
            """)
            
            result = cursor.fetchone()
            if result:
                constraint_name = result[0]
                
                # Drop the existing constraint
                cursor.execute(f"""
                    ALTER TABLE user_roles 
                    DROP CONSTRAINT IF EXISTS {constraint_name}
                """)
                
                # Add the constraint back with CASCADE
                cursor.execute("""
                    ALTER TABLE user_roles 
                    ADD CONSTRAINT issues_userrole_user_id_92d31a0e_fk_auth_user_id 
                    FOREIGN KEY (user_id) 
                    REFERENCES auth_user(id) 
                    ON DELETE CASCADE
                """)

def reverse_fix_foreign_key_constraint(apps, schema_editor):
    """Reverse the constraint fix"""
    pass  # We don't want to reverse this fix

class Migration(migrations.Migration):

    dependencies = [
        ('issues', '0017_update_userrole_for_rbac'),
    ]

    operations = [
        migrations.RunPython(
            fix_foreign_key_constraint,
            reverse_fix_foreign_key_constraint,
        ),
    ]
